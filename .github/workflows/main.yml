name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Optimize apt (disable man-db)
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get purge -y man-db || true
          sudo rm -f /var/lib/man-db/auto-update || true
          sudo mkdir -p /etc/dpkg/dpkg.cfg.d
          echo 'path-exclude /usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/99disable-man-db

      - name: Install Dependencies (smoke)
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ack-grep

      - name: Run Smoke Tests
        shell: bash
        run: |
          sudo Xvfb :99 -ac &
          export DISPLAY=:99
          bash tests/smoke_tests

  playwright-browsers:
    needs: smoke-tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # ---- Linux ----
      - name: Install System Dependencies (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install -y chromium-browser x11-apps php-cli

          # Optional: disable man-db
          sudo apt-get purge -y man-db || true
          sudo rm -f /var/lib/man-db/auto-update || true
          sudo mkdir -p /etc/dpkg/dpkg.cfg.d
          echo 'path-exclude /usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/99disable-man-db

          # Dynamische .env erzeugen
          echo "APP_ENV=ci" > .env
          echo "APP_DEBUG=false" >> .env

          # Starte Webserver
          sudo php -S 0.0.0.0:8000 -t . &

      # ---- Windows ----
      - name: Install System Dependencies (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Install PHP via choco
          choco install php --no-progress -y
          php -v

          # Dynamische .env erzeugen
          Set-Content -Path .env -Value "APP_ENV=ci`nAPP_DEBUG=false"

          # Starte Webserver
          Start-Process php -ArgumentList "-S 0.0.0.0:8000 -t ." -NoNewWindow

      # ---- Playwright ----
      - name: Install Python & Playwright
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install playwright
          playwright install

      - name: Run Playwright Tests
        shell: bash
        run: |
          echo "Running Playwright tests on ${RUNNER_OS}"

          if [ "${RUNNER_OS}" = "Linux" ]; then
            sudo Xvfb :99 -ac &
            export DISPLAY=:99
            bash run_tests --no-smoke-tests --browser=chromium

          elif [ "${RUNNER_OS}" = "Windows" ]; then
            bash run_tests --no-smoke-tests --browser=chromium
          fi

      # ---- Create Git Tag ----
      - name: Create a new version
        if: ${{ success() }}
        shell: bash
        run: |
          echo "Creating new version"
          git tag ${{ github.run_number }} || true
          git push origin --tags || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
