name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  smoke-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Optimize apt (disable man-db)
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get purge -y man-db || true
          sudo rm -f /var/lib/man-db/auto-update || true
          sudo mkdir -p /etc/dpkg/dpkg.cfg.d
          echo 'path-exclude /usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/99disable-man-db

      - name: Install Dependencies (smoke)
        run: |
          sudo apt-get update
          sudo apt-get install -y ack-grep

      - name: Run Smoke Tests
        run: |
          sudo Xvfb :99 -ac &
          export DISPLAY=:99
          bash tests/smoke_tests


  playwright-browsers:
    needs: smoke-tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-24.04, macos-latest, windows-latest]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # -------------------------------------------------
      # üê≥ Docker setup
      # -------------------------------------------------
      - name: Setup Docker (Linux)
        if: runner.os == 'Linux'
        uses: docker/setup-buildx-action@v3

      - name: Start Docker Service (Linux)
        if: runner.os == 'Linux'
        run: |
          echo "Starting Docker service..."
          sudo systemctl start docker || sudo service docker start || true
          docker version || echo "Docker not fully available but continuing."

      - name: Setup Docker (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "Setting up Docker on macOS..."
          brew update
          brew install --cask docker || true
          brew install colima || true
          colima start || true
          docker version || echo "Docker not ready yet, continuing..."

          # Fix: ensure 'docker compose' alias works
          if ! docker compose version >/dev/null 2>&1; then
            echo "Installing docker-compose fallback..."
            brew install docker-compose || true
            echo '#!/bin/bash' | sudo tee /usr/local/bin/docker
            echo 'if command -v docker compose >/dev/null 2>&1; then docker compose "$@"; else docker-compose "$@"; fi' | sudo tee -a /usr/local/bin/docker
            sudo chmod +x /usr/local/bin/docker
          fi

      - name: Skip Docker on Windows
        if: runner.os == 'Windows'
        run: echo "Skipping Docker setup on Windows (unsupported in CI runner)."

      # -------------------------------------------------
      # üß∞ System Dependencies
      # -------------------------------------------------
      - name: Install System Dependencies
        shell: bash
        run: |
          echo "Installing dependencies for ${RUNNER_OS}"

          if [ "${RUNNER_OS}" = "Linux" ]; then
            export DEBIAN_FRONTEND=noninteractive
            sudo apt-get purge -y man-db || true
            sudo rm -f /var/lib/man-db/auto-update || true
            sudo mkdir -p /etc/dpkg/dpkg.cfg.d
            echo 'path-exclude /usr/share/man/*' | sudo tee /etc/dpkg/dpkg.cfg.d/99disable-man-db
            sudo apt-get update
            sudo apt-get install -y chromium-browser x11-apps || sudo apt-get install -y chromium
          
          elif [ "${RUNNER_OS}" = "macOS" ]; then
            brew install php || true
          
          elif [ "${RUNNER_OS}" = "Windows" ]; then
            choco install php --no-progress -y || echo "PHP already installed or optional"
          
          else
            echo "Unsupported OS: ${RUNNER_OS}"
            exit 1
          fi

      # -------------------------------------------------
      # üß© Ensure PHP
      # -------------------------------------------------
      - name: Ensure PHP Installed
        shell: bash
        run: |
          if ! command -v php >/dev/null 2>&1; then
            echo "PHP not found. Installing..."
            if [ "${RUNNER_OS}" = "Linux" ]; then
              sudo apt-get install -y php-cli
            elif [ "${RUNNER_OS}" = "macOS" ]; then
              brew install php
            elif [ "${RUNNER_OS}" = "Windows" ]; then
              choco install php --no-progress -y
            fi
          fi
          php -v || echo "PHP installed but version check failed."

      # -------------------------------------------------
      # üé≠ Playwright
      # -------------------------------------------------
      - name: Install Playwright and Browsers
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install playwright
          playwright install

      - name: Run Playwright Tests
        shell: bash
        run: |
          echo "Running tests on ${RUNNER_OS}"
          if [ "${RUNNER_OS}" = "Linux" ]; then
            sudo Xvfb :99 -ac &
            export DISPLAY=:99
            bash run_tests --no-smoke-tests --browser=chromium
          
          elif [ "${RUNNER_OS}" = "macOS" ]; then
            bash run_tests --no-smoke-tests --browser=chromium || true
            bash run_tests --no-smoke-tests --browser=webkit
          
          elif [ "${RUNNER_OS}" = "Windows" ]; then
            bash run_tests --no-smoke-tests --browser=chromium
          
          else
            echo "Unsupported runner: ${RUNNER_OS}"
            exit 1
          fi

      # -------------------------------------------------
      # üè∑Ô∏è Version tagging
      # -------------------------------------------------
      - name: Create a new version
        if: ${{ success() }}
        run: |
          echo "Creating new version"
          git tag ${{ github.run_number }} || true
          git push origin --tags || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
