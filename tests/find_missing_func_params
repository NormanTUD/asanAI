#!/usr/bin/env python3
import os, re, sys

ignored_files = ["asanai.js", "manual.js"]
ignored_file_funcs = [
    "main.js:fire",
    "gui.js:fire",
    "model.js:traindebug",
    "model.js:predict",
    "tests.js:predict",
    "train.js:predict",
    "data.js:predict",
    "gui.js:predict",
    "gui.js:assert",
    "gui.js:load_model",
    "explain.js:predict",
    "explain.js:assert",
    "data.js:fire",
    "model.js:fire",
    "easter_eggs.js:random",
    "easter_eggs.js:fire",
    "carminigame.js:random",
    "data.js:random",
    "debug.js:random",
    "debug.js:l",
    "predict.js:predict",
    "train.js:fire"
]

def find_js_files():
    return [f for f in os.listdir(".") if f.endswith(".js") and os.path.isfile(f) and f not in ignored_files]

def split_params(paramstring):
    params, current, depth, in_str, esc = [], "", 0, None, False
    for ch in paramstring:
        if esc:
            current += ch
            esc = False
            continue
        if ch == "\\":
            current += ch
            esc = True
            continue
        if in_str:
            current += ch
            if ch == in_str:
                in_str = None
            continue
        if ch in ("'", '"', "`"):
            in_str = ch
            current += ch
            continue
        if ch in "([{":
            depth += 1
            current += ch
            continue
        if ch in ")]}":
            depth -= 1
            current += ch
            continue
        if ch == "," and depth == 0:
            params.append(current.strip())
            current = ""
            continue
        current += ch
    if current.strip():
        params.append(current.strip())
    return params

def extract_function_defs(content):
    pattern = re.compile(r'\b(?:async\s+)?function\s+([A-Za-z_]\w*)\s*\(([^)]*)\)')
    defs = {}
    for m in pattern.finditer(content):
        name, raw_params = m.groups()
        params = split_params(raw_params)

        min_args = 0
        max_args = 0
        has_rest = False

        for p in params:
            if p.startswith("..."):
                has_rest = True
            elif "=" in p:
                max_args += 1
            else:
                min_args += 1
                max_args += 1

        if has_rest:
            max_args = float("inf")

        defs[name] = (min_args, max_args)
    return defs

def split_args(argstring):
    args, current, depth, in_str, esc = [], "", 0, None, False
    for ch in argstring:
        if esc:
            current += ch
            esc = False
            continue
        if ch == "\\":
            current += ch
            esc = True
            continue
        if in_str:
            current += ch
            if ch == in_str:
                in_str = None
            continue
        if ch in ("'", '"', "`"):
            in_str = ch
            current += ch
            continue
        if ch in "([{":
            depth += 1
            current += ch
            continue
        if ch in ")]}":
            depth -= 1
            current += ch
            continue
        if ch == "," and depth == 0:
            args.append(current.strip())
            current = ""
            continue
        current += ch
    if current.strip():
        args.append(current.strip())
    return args

def extract_function_calls(content, defs):
    results = []
    lines = content.splitlines()
    for lineno, line in enumerate(lines, start=1):
        pattern = re.compile(r'\b(' + "|".join(re.escape(n) for n in defs) + r')\s*\(')
        for m in pattern.finditer(line):
            name = m.group(1)
            start = m.end()
            depth, in_str, esc = 1, None, False
            i = start
            while i < len(line) and depth > 0:
                ch = line[i]
                if esc:
                    esc = False
                elif ch == "\\":
                    esc = True
                elif in_str:
                    if ch == in_str:
                        in_str = None
                elif ch in ("'", '"', "`"):
                    in_str = ch
                elif ch == "(":
                    depth += 1
                elif ch == ")":
                    depth -= 1
                i += 1
            argstring = line[start:i-1]
            args = split_args(argstring)
            results.append((name, len(args), argstring[:50], lineno))
    return results

def color_text(text, color):
    colors = {"red":"\033[91m", "green":"\033[92m", "yellow":"\033[93m", "blue":"\033[94m", "reset":"\033[0m"}
    return f"{colors.get(color,'')}{text}{colors['reset']}"

def check_files(files):
    all_defs = {}
    contents = {}
    for f in files:
        text = open(f, encoding="utf-8", errors="ignore").read()
        contents[f] = text
        defs = extract_function_defs(text)
        for name, v in defs.items():
            all_defs[name] = v
    r = 0
    for f, text in contents.items():
        calls = extract_function_calls(text, all_defs)
        for name, argc, preview, lineno in calls:
            min_a, max_a = all_defs[name]
            if not (min_a <= argc <= max_a):
                if f"{f}:{name}" not in ignored_file_funcs:
                    print(f"{color_text(f, 'blue')}:{color_text(lineno, 'yellow')} call to {color_text(name, 'red')} with {argc} args (expected {min_a}-{max_a}) â†’ {preview}...")
                    r += 1
    if r:
        print(f"{color_text('Found', 'red')} {r} issues")
    else:
        print(color_text("Found no issues", "green"))

    if r > 254:
        return 254

    return r

def main():
    files = find_js_files()
    if not files:
        print("No .js files found")
        sys.exit(1)
    return check_files(files)

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("You pressed CTRL-c")
        sys.exit(0)
